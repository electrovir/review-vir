import{a as l,w,R as d,S as y,U as m,e as u,Q as f,F as h,V as T}from"./index-34ba299e.js";import{l as k}from"./index-f4dd668f.js";const S=new TextEncoder,g=new TextDecoder,s="AES-GCM";async function p(t){return await crypto.subtle.importKey("raw",t.buffer,s,!0,["encrypt","decrypt"])}async function v({data:t,secretEncryptionKey:n}){const e=globalThis.crypto.getRandomValues(new Uint8Array(12)),r=await crypto.subtle.encrypt({name:s,iv:e},await p(a(n)),a(t));return{encryptedData:new Uint8Array(r),publicInitVector:e}}async function b({encryptedData:t,secretEncryptionKey:n,publicInitVector:e}){const r=await crypto.subtle.decrypt({name:s,iv:a(e)},await p(a(n)),a(t));return g.decode(r)}function a(t){return l(t,"string")?S.encode(t):t}const i=k.createInstance({description:"Store for review-vir auth tokens.",name:"review-vir-auth-tokens",storeName:"review-vir-auth-tokens"});async function V(t,n){const e=await b({secretEncryptionKey:t,encryptedData:n.data,publicInitVector:n.publicInitVector}),r=JSON.parse(e);return h(r,T)?r:void 0}async function A({secretEncryptionKey:t}){try{return w((await Promise.all(d(y).map(async n=>{const e=m.devAuthTokens[n],r=await i.getItem(n)||void 0;if(!r)return e!=null&&e.length?[n,e]:void 0;const o=(await Promise.all(r.map(async c=>await V(t,c)))).filter(u);return[n,o]}))).filter(u))}catch{return console.error("Failed to load auth tokens. Wiping store."),await i.clear(),{}}}async function I({secretEncryptionKey:t,authToken:n}){const{encryptedData:e,publicInitVector:r}=await v({data:JSON.stringify(n),secretEncryptionKey:t});return{data:e,publicInitVector:r}}async function x({secretEncryptionKey:t,authTokensByService:n}){if(!t)throw new Error("Missing encryption key.");await Promise.all(d(y).map(async e=>{const r=n[e];if(r){const o=await Promise.all(r.map(async c=>await I({secretEncryptionKey:t,authToken:c})));await i.setItem(e,o)}else{await i.removeItem(e);return}}))}const P=f({saveServiceAuthTokens:x,loadServiceAuthTokens:A});export{P as authStoreClient,A as loadServiceAuthTokens,i as reviewVirAuthTokensStore,x as saveServiceAuthTokens};
